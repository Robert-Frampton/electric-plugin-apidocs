{namespace ElectricApi}

/**
 * @param apiData
 * @param filter
 * @param project
 * @param serialized
 * @param? entityData
 */
{template .render}
	<div class="api">
		{call .script /}

		<nav class="sidebar">
			{call .navigation data="all" /}
		</nav>

		<div class="sidebar-offset">
			<div class="container-hybrid docs-home-top">
				<div class="entity-container" id="entityContainer">
					{if $entityData and $entityData.name}
						{call ElectricApiEntities.render}
							{param entityData: $entityData /}
							{param filter: $filter /}
							{param project: $project /}
						{/call}
					{/if}
				</div>
			</div>
		</div>

		<script type="text/javascript">
			new window.ApiAutocomplete({lb}
				dataSource: '/api/{$project.ref}/API.json',
				maxResults: 4,
				project: {lb}
					ref: {$project.ref},
					repo: {$project.repo},
					user: {$project.user}
				{rb},
				input: document.querySelector('input[name="query"]')
			{rb});

			var serialized = JSON.parse({$serialized});

			if (serialized.entityData && serialized.entityData.name) {lb}
				metal.Component.render(metal.ElectricApiEntities, {lb}
					element: '#entityContainer',
					entityData: serialized.entityData,
					filter: serialized.filter,
					project: serialized.project
				{rb});
			{rb}
		</script>
	</div>
{/template}

/**
 * @param augments
 */
{template .augments}
	<div class="entity-augments">
		{foreach $augmentation in $augments}
			<span>{$augmentation.title} </span>

			{if $augmentation.link}
				<a href="/api/{$augmentation.link}.html">{$augmentation.name}</a>
			{else}
				<code>{$augmentation.name}</code>
			{/if}
		{/foreach}
	</div>
{/template}

/**
 * @param default
 */
{template .default}
	<div class="entity-default">
		<span>Default: <code>{$default}</code></span>
	</div>
{/template}

/**
 * @param description
 */
{template .description}
	{if $description.type == 'html' or $description.type == 'text'}
		{$description.value}
	{elseif $description.type == 'inlineCode'}
		<code>{$description.value}</code>
	{elseif $description.children}
		{foreach $child in $description.children}
			{call .description}
				{param description: $child /}
			{/call}
		{/foreach}
	{/if}
{/template}

/**
 * @param entityData
 * @param project
 */
{template .entity}
	<section class="card entity" data-access="{$entityData.access ? $entityData.access : 'public'}" id="{$entityData.name}">
		{call .entityHeader data="all" /}

		{if $entityData.augments}
			{call .augments}
				{param augments: $entityData.augments /}
			{/call}
		{/if}

		{if $entityData.description}
			<div class="entity-description">
				{call .description}
					{param description: $entityData.description /}
				{/call}
			</div>
		{/if}

		{if $entityData.default}
			{call .default}
				{param default: $entityData.default /}
			{/call}
		{/if}

		{if $entityData.params}
			{call .params}
				{param params: $entityData.params /}
			{/call}
		{/if}

		{if $entityData.returns}
			{call .returns}
				{param returns: $entityData.returns /}
			{/call}
		{/if}

		{if $entityData.members}
			{call .members data="all"}
				{param members: $entityData.members /}
			{/call}
		{/if}
	</section>
{/template}

/**
 * @param entityData
 * @param project
 */
{template .entityHeader}
	<div class="entity-header">
		{call .entityName data="all" /}

		{let $loc: $entityData.context.loc /}

		{let $filePath: $entityData.context.file + '#L' + $loc.start.line + ($loc.end.line != $loc.start.line ? '-L' + $loc.end.line : '') /}

		<a
			class="entity-link"
			href="https://github.com/{$project.user}/{$project.repo}/tree/{$project.ref}/{$filePath}"
		>
			{$filePath}
		</a>
	</div>
{/template}

/**
 * @param entityData
 */
{template .entityName}
	<h1 class="entity-name">
		<a href="#{$entityData.name}">
			{if $entityData.access}
				<span class="entity-access">{$entityData.access + ' '}</span>
			{/if}

			{$entityData.name}

			{if $entityData.kind == 'function' or $entityData.name == 'constructor'}
				(
					{if $entityData.params}
						{call .inlineParams}
							{param params: $entityData.params /}
						{/call}
					{/if}
				)
			{elseif $entityData.type}
				<span class="entity-name-type">:{$entityData.type}</span>
			{/if}
		</a>
	</h1>
{/template}

/**
 * @param params
 */
{template .inlineParams}
	<span>
		{foreach $param in $params}
			{$param.name}

			{if not isLast($param)}
				{', '}
			{/if}
		{/foreach}
	</span>
{/template}

/**
 * @param members
 * @param project
 */
{template .members}
	<div class="entity-members">
		{if $members.properties and $members.properties.length}
			<h2>Properties:</h2>

			{foreach $property in $members.properties}
				{call .entity data="all"}
					{param entityData: $property /}
					{param instance: true /}
				{/call}
			{/foreach}
		{/if}

		{if $members.methods and $members.methods.length}
			<h2>Methods:</h2>

			{foreach $method in $members.methods}
				{call .entity data="all"}
					{param entityData: $method /}
					{param instance: true /}
				{/call}
			{/foreach}
		{/if}

		{if $members.static and $members.static.length}
			<h2>Static:</h2>

			{foreach $staticMember in $members.static}
				{call .entity data="all"}
					{param entityData: $staticMember /}
					{param static: true /}
				{/call}
			{/foreach}
		{/if}
	</div>
{/template}

/**
 * @param apiData
 * @param project
 */
{template .navigation}
	<div class="sidebar-search">
		<div class="form-group">
			<select class="form-control" onchange="location = this.value;">
				{foreach $ref in $project.refs}
					<option value="/api/{$ref}" {if $ref == $project.ref}selected{/if}>{$ref}</option>
				{/foreach}
			</select>
		</div>

		<div class="form-group">
			<input autocomplete="off" class="form-control" name="query" placeholder="Search...">
		</div>
	</div>

	<ul class="sidebar-list sidebar-list-1">
		{foreach $entity in $apiData}
			<li class="sidebar-item">
				<a class="sidebar-link" href="/api/{$project.ref}/{$entity.name}.html">{$entity.name}</a>
			</li>
		{/foreach}
	</ul>
{/template}

/**
 * @param param
 */
{template .param}
	<tr>
		<td>{$param.name}</td>
		<td>
			{if $param.type}
				{call .type}
					{param type: $param.type /}
				{/call}
			{/if}
		</td>
		<td>
			{if $param.description}
				{call .description}
					{param description: $param.description /}
				{/call}
			{/if}
		</td>
	</tr>
{/template}

/**
 * @param params
 */
{template .params}
	<div class="entity-params">
		<span>Parameters:</span>

		<div class="datatable">
			<table class="table">
				<thead>
					<tr>
						<th>Parameter</th>
						<th>Type</th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					{foreach $param in $params}
						{call .param}
							{param param: $param /}
						{/call}
					{/foreach}
				</tbody>
			</table>
		</div>
	</div>
{/template}

/**
 * @param returns
 */
{template .returns}
	<div class="entity-returns">
		{let $return: $returns[0] /}

		<span>
			Returns: <code>
				{call .type}
					{param type: $return.type /}
				{/call}
			</code>
		</span>

		{if $return.description}
			<div>
				{call .description}
					{param description: $return.description /}
				{/call}
			</div>
		{/if}
	</div>
{/template}

/**
 *
 */
{template .script}
	<script type="text/javascript">
		function ApiAutocomplete(config) {lb}
			this.data = config.data;
			this.dataSource = config.dataSource;
			this.input = config.input;
			this.maxResults = config.maxResults;
			this.project = config.project;

			this.autocomplete = new metal.Autocomplete({lb}
				autoBestAlign: false,
				data: this.search_.bind(this),
				format: this.format_.bind(this),
				inputElement: this.input,
				select: function(event) {lb}
					window.location = event.url;
				{rb}
			{rb});
		{rb}

		ApiAutocomplete.prototype = {lb}
			disposed: function() {lb}
				var autocomplete = this.autocomplete;

				if (autocomplete) {lb}
					autocomplete.dispose();
				{rb}
			{rb},

			format_: function(data) {lb}
				var url = this.formatURL_(data);

				return {lb}
					textPrimary: '<a class="autocomplete-link" href="' + url + '">' +
						'<div class="autocomplete-result">' +
							'<p class="autocomplete-title">' + data.name + '</p>' +
							'<p class="autocomplete-text">' + data.memberof + '</p>' +
						'</div>' +
					'</a>',
					url: url
				{rb};
			{rb},

			formatURL_: function(data) {lb}
				var memberof = data.memberof;
				var name = data.name;

				var url = '/api/' + this.project.ref + '/' + memberof || name + '.html';

				if (memberof && name !== memberof) {lb}
					url += '#' + name;
				{rb}

				return url;
			{rb},

			matchesQuery_: function(entity, query) {lb}
				var name = entity.name;

				name = name ? name.toLowerCase() : '';

				return name.indexOf(query) > -1;
			{rb},

			filterResults_: function(data, query) {lb}
				var instance = this;
				var results = [];

				data.forEach(function(entity) {lb}
					if (instance.matchesQuery_(entity, query)) {lb}
						results.push(entity);
					{rb}

					if (entity.members) {lb}
						results = results.concat(instance.filterResults_(entity.members.instance, query));
						results = results.concat(instance.filterResults_(entity.members.static, query));
					{rb}
				{rb});

				return results;
			{rb},

			search_: function(query) {lb}
				var instance = this;

				return metal.Promise.resolve(this.data)
					.then(function(data) {lb}
						if (data) {lb}
							return data;
						{rb}
						else {lb}
							return metal.Ajax.request(instance.dataSource)
						{rb}
					{rb})
					.then(function(data) {lb}
						if (data.response) {lb}
							data = JSON.parse(data.response);

							instance.data = data;
						{rb}

						var results = [];

						if (data && query) {lb}
							results = instance.filterResults_(data, query.toLowerCase());

							if (results.length > instance.maxResults) {lb}
								results = results.slice(0, instance.maxResults);
							{rb}
						{rb}

						return results;
					{rb});
			{rb}
		{rb};

		window.ApiAutocomplete = ApiAutocomplete;
	</script>
{/template}

/**
 * @param type
 */
{template .type}
	<span>
		{if $type.expression}
			{$type.expression.name}
		{else}
			{$type.name}
		{/if}
	</span>
{/template}
